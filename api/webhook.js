import { createClient } from '@supabase/supabase-js';

// 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø SUPABASE –ò TELEGRAM
const SUPABASE_URL = process.env.BOT_SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

// 2. –ö–û–ù–°–¢–ê–ù–¢–´ –ö–õ–ê–í–ò–ê–¢–£–†–´ (–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —ç–º–æ–¥–∑–∏)
const COMPLETED_KEYBOARD = {
    keyboard: [
        [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }],
        [{ text: 'üìä –ú–æ–π –ü—Ä–æ–≥—Ä–µ—Å—Å' }, { text: 'üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥' }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
};
const REMOVE_KEYBOARD = {
    remove_keyboard: true,
};


// 3. –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–ê–î–ï–†–ñ–ö–ê (DELAY)
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// 4. –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–í–ï–¢–ê –í TELEGRAM
async function sendTelegramMessage(chatId, text, keyboard = null, parse_mode = 'Markdown') {
    const payload = {
        chat_id: chatId,
        text: text,
        parse_mode: parse_mode,
    };

    if (keyboard) {
        payload.reply_markup = keyboard;
    }

    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
    });
    if (!response.ok) {
        console.error(`Telegram API Error: ${await response.text()}`);
    }
    return response.json();
}

// 5. –§–£–ù–ö–¶–ò–Ø: –°–¢–ê–¢–£–° –ü–ï–ß–ê–¢–ê–ï–¢...
async function sendChatAction(chatId, action = 'typing') {
    await fetch(`${TELEGRAM_API}/sendChatAction`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            chat_id: chatId,
            action: action,
        }),
    });
}


// 6. –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö (Webhook)
export default async (request, response) => {
    
    if (request.method !== 'POST') {
        return response.status(405).send('Only POST requests allowed');
    }

    let body;
    try {
        const rawBody = await new Promise((resolve) => {
            let data = '';
            request.on('data', chunk => data += chunk);
            request.on('end', () => resolve(data));
        });
        body = JSON.parse(rawBody);

    } catch (e) {
        console.error('Body parsing failed:', e);
        return response.status(400).send('Invalid request body');
    }

    const message = body.message;

    if (!message || !message.text || !message.chat) {
        return response.status(200).send('No message to process');
    }

    const chatId = message.chat.id;
    const incomingText = message.text.trim();
    const userFirstName = message.from.first_name || '–¥—Ä—É–≥';

    try {
        // A. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ.
        const { data: userData, error: userError } = await supabase
            .from('users')
            .select('*')
            .eq('telegram_id', chatId)
            .single();

        if (userError && userError.code !== 'PGRST116') {
            console.error('Supabase Error (SELECT):', userError);
            await sendTelegramMessage(chatId, `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î. –ö–æ–¥: ${userError.code}.`, 'HTML');
            return response.status(500).send('Database Error');
        }
        
        // ===============================================
        // –õ–û–ì–ò–ö–ê 1: –ö–û–ú–ê–ù–î–ê /start (–ò–ª–∏ –ù–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        // ===============================================
        const isStartCommand = incomingText.startsWith('/start');
        
        if (isStartCommand || !userData) {
            
            // 1. –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!userData) {
                const { error: insertError } = await supabase
                    .from('users')
                    .insert([{ telegram_id: chatId, onboarding_state: 'STEP_1' }]);
                
                if (insertError) {
                    if (insertError.code === '23505') {
                        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É.');
                    } else {
                        console.error('Insert Error:', insertError);
                        await sendTelegramMessage(chatId, `–û—à–∏–±–∫–∞ –ë–î (INSERT). –ö–æ–¥: ${insertError.code}.`, 'HTML');
                        return response.status(500).send('Database Insert Error');
                    }
                }
            }
            
            // 1.5. –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
            if (isStartCommand && userData && userData.onboarding_state !== 'STEP_1') {
                 const { error: resetError } = await supabase
                    .from('users')
                    .update({ onboarding_state: 'STEP_1' })
                    .eq('telegram_id', chatId);

                if (resetError) {
                    console.error('Reset State Error:', resetError);
                    await sendTelegramMessage(chatId, `–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞: ${resetError.code}.`, 'HTML');
                }
                
                // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º
                await sendTelegramMessage(chatId, '...', REMOVE_KEYBOARD, 'HTML');
            }
            
            // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ 
            const welcomeMessage = `üß† –ü—Ä–∏–≤–µ—Ç, *${userFirstName}*. –¢—ã –≤ —Å–∏—Å—Ç–µ–º–µ *–ö–≤–∞–Ω—Ç—É–º–Ω—ã—Ö –ü—Ä–∏–≤—ã—á–µ–∫*.\n\n–î–∞–∂–µ —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –¢–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ ‚Äî –ø–æ–Ω—è—Ç—å, **–ö–∞–∫–∏–º —Ç—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å**?`;
            const step1Question = `*–®–ê–ì 1 –∏–∑ 10: –ò–î–ï–ù–¢–ò–ß–ù–û–°–¢–¨.*\n\n–ö–∞–∂–¥–æ–µ —Ç–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Äî —ç—Ç–æ **–¥–≤–∏–∂–µ–Ω–∏–µ** –∫ —Ç–≤–æ–µ–π –Ω–æ–≤–æ–π, —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏.\n\n–ù–∞–ø–∏—à–∏, –∫–∞–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º —Ç—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: _–ó–¥–æ—Ä–æ–≤—ã–º –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º_, _–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º_, _–ß–µ–ª–æ–≤–µ–∫–æ–º-–°–∏—Å—Ç–µ–º–æ–π_)`;


            // –ò–°–ü–û–õ–¨–ó–£–ï–ú TYPING –∏ DELAY (1000 –º—Å):
            await sendChatAction(chatId, 'typing');
            await delay(1000);
            await sendTelegramMessage(chatId, welcomeMessage);
            
            // –ò–°–ü–û–õ–¨–ó–£–ï–ú TYPING –ü–ï–†–ï–î –í–¢–û–†–´–ú –°–û–û–ë–©–ï–ù–ò–ï–ú:
            await sendChatAction(chatId, 'typing');
            await delay(1000);
            await sendTelegramMessage(chatId, step1Question);

        // ===============================================
        // –õ–û–ì–ò–ö–ê 2: –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê (–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏ –†–∞–±–æ—á–∏–π –†–µ–∂–∏–º)
        // ===============================================
        } else {
            const currentStep = userData.onboarding_state;
            // –£–¥–æ—Å—Ç–æ–≤–µ—Ä–∏–º—Å—è, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫.
            const textToSave = incomingText.substring(0, 100);
            let updatePayload = {};
            let confirmationMessage = '';
            let nextQuestion = '';

            // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –†–ê–ë–û–ß–ï–ì–û –†–ï–ñ–ò–ú–ê (COMPLETED)
            if (currentStep === 'COMPLETED') {
                const habitName = userData.habit_micro_step || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
                const identity = userData.desired_identity || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
                if (incomingText.startsWith('/stats') || incomingText === 'üìä –ú–æ–π –ü—Ä–æ–≥—Ä–µ—Å—Å') {
                    confirmationMessage = `üìä *–¢–í–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê* (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n*–¢–µ–∫—É—â–∞—è –ü—Ä–∏–≤—ã—á–∫–∞:* ${habitName}\n*–ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å:* ${identity}\n\n*–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:* 0 –¥–Ω–µ–π (–ù–∞—á–Ω–∏—Ç–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å!)\n*–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤ –∑–∞ –ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å:* ${userData.habit_votes_count || 0}\n\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ –Ω–æ—á–Ω–æ–π –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç.`;
                } else if (incomingText.startsWith('/leaderboard') || incomingText === 'üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥') {
                    confirmationMessage = `üèÜ *–õ–ò–î–ï–†–ë–û–†–î* (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à —Ä–∞–Ω–≥ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. \n\n_–ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π –≥–æ–ª–æ—Å –∑–∞ –ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç –≤–∞—Å –≤–≤–µ—Ä—Ö._`;
                } else if (incomingText.startsWith('/done') || incomingText.startsWith('/yes') || incomingText === '‚úÖ –ì–æ—Ç–æ–≤–æ') {
                    
                    const newVoteCount = (userData.habit_votes_count || 0) + 1;
                    
                    const { error: voteError } = await supabase
                        .from('users')
                        .update({ habit_votes_count: newVoteCount })
                        .eq('telegram_id', chatId);

                    if (voteError) {
                        confirmationMessage = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: ${voteError.code}.`;
                    } else {
                        confirmationMessage = `üî• *–í–´–ü–û–õ–ù–ï–ù–û!* üî•\n\n–¢–≤–æ—è –ø—Ä–∏–≤—ã—á–∫–∞: *${habitName}* –∑–∞—á—Ç–µ–Ω–∞.\n\n–≠—Ç–æ *${newVoteCount}-–π –≥–æ–ª–æ—Å* –∑–∞ —Ç–≤–æ—é –ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å: *${identity}*.\n\n_–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –Ω–∞ 1% –ª—É—á—à–µ._`;
                    }
                } else {
                    confirmationMessage = `–¢—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥! –¢–≤–æ—è –ø—Ä–∏–≤—ã—á–∫–∞: ${habitName}. \n\n_–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç—á–µ—Ç–∞._`;
                }

                nextQuestion = null;
                
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await sendTelegramMessage(chatId, confirmationMessage, COMPLETED_KEYBOARD);
                return response.status(200).send('Processed');

            } else {
                
                // --- –õ–û–ì–ò–ö–ê –û–ù–ë–û–†–î–ò–ù–ì–ê (STEP_1 - STEP_10) ---
                switch (currentStep) {
                    case 'STEP_1':
                        updatePayload = { desired_identity: textToSave, onboarding_state: 'STEP_2' };
                        confirmationMessage = `‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –¢–≤–æ—è –Ω–æ–≤–∞—è –ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å: *${textToSave}*.\n\n–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–æ–µ —Ç–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç **–¥–≤–∏–∂–µ–Ω–∏–µ–º** –∫ —ç—Ç–æ–π —Ü–µ–ª–∏. –î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º *–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç* –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.`;
                        nextQuestion = "*–®–ê–ì 2 –∏–∑ 10: –ß—Ç–æ —Ç—ã –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å? (–ü—Ä–∞–≤–∏–ª–æ 2 –ú–∏–Ω—É—Ç)*\n\n–õ—é–±–∞—è –Ω–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–Ω–∏–º–∞—Ç—å *–Ω–µ –±–æ–ª—å—à–µ 120 —Å–µ–∫—É–Ω–¥* –≤ —Å–∞–º–æ–º –µ–µ –Ω–∞—á–∞–ª–µ.\n\n–ù–∞–ø–∏—à–∏, –∫–∞–∫—É—é –º–∏–∫—Ä–æ-–ø—Ä–∏–≤—ã—á–∫—É —Ç—ã –≥–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–û—Ç–∂–∞—Ç—å—Å—è 1 —Ä–∞–∑\", \"–ü—Ä–æ—á–∏—Ç–∞—Ç—å 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–Ω–∏–≥–∏\", \"–í—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã\").";
                        break;
                    case 'STEP_2':
                        updatePayload = { habit_micro_step: textToSave, onboarding_state: 'STEP_3' };
                        confirmationMessage = `‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –¢–≤–æ—è –Ω–æ–≤–∞—è –º–∏–∫—Ä–æ-–ø—Ä–∏–≤—ã—á–∫–∞: *${textToSave}*.\n\n–ù–∞–º –Ω—É–∂–µ–Ω –ª–∏—à—å **—Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–º–ø—É–ª—å—Å**, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω–µ—Ä—Ü–∏—é.\n\n*–ü—Ä–∞–≤–∏–ª–æ 3: –°–¥–µ–ª–∞–π —Å–≤–æ—é –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –ª–µ–≥–∫–æ–π.*`;
                        // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –®–∞–≥–∞ 3
                        nextQuestion = "*–®–ê–ì 3 –∏–∑ 10: –¢—Ä–∏–≥–≥–µ—Ä.*\n\n–õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± –Ω–∞—á–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ ‚Äî **–≤—Å—Ç—Ä–æ–∏—Ç—å** –µ–≥–æ –≤–æ —á—Ç–æ-—Ç–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º **–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫** (Habit Stacking).\n\n–ù–∞–ø–∏—à–∏, –∫–∞–∫–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª—É–∂–∏—Ç **—Ç—Ä–∏–≥–≥–µ—Ä–æ–º** –¥–ª—è —Ç–≤–æ–µ–π –º–∏–∫—Ä–æ-–ø—Ä–∏–≤—ã—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã–∫–ª—é—á—É –±—É–¥–∏–ª—å–Ω–∏–∫\", \"–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ—á–∏—â—É –∑—É–±—ã\", \"–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä—é —Å–æ—Ü—Å–µ—Ç–∏\").";
                        break;
                    case 'STEP_3':
                        updatePayload = { habit_link_action: textToSave, onboarding_state: 'STEP_4' };
                        confirmationMessage = `‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –¢—ã –±—É–¥–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–∏–≤—ã—á–∫—É **–ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫:** *${textToSave}*.\n\n–≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç **—Ç—Ä–∏–≥–≥–µ—Ä**, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.`;
                        // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –®–∞–≥–∞ 4
                        nextQuestion = "*–®–ê–ì 4 –∏–∑ 10: –ß–µ–º —Ç—ã —Å–µ–±—è –Ω–∞–≥—Ä–∞–¥–∏—à—å?*\n\n–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞ –ø—Ä–∏–≤—ã—á–∫–∏ (–ü–æ–¥—Å–∫–∞–∑–∫–∞ -> –î–µ–π—Å—Ç–≤–∏–µ -> –ù–∞–≥—Ä–∞–¥–∞) –Ω—É–∂–Ω–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ. –≠—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª –Ω—É–∂–µ–Ω –º–æ–∑–≥—É, —á—Ç–æ–±—ã –∑–∞–ø–æ–º–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.\n\n–ù–∞–ø–∏—à–∏, —á–µ–º —Ç—ã —Å–µ–±—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞–≥—Ä–∞–¥–∏—à—å –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–∫—Ä–æ-–ø—Ä–∏–≤—ã—á–∫–∏ (–ü—Ä–∏–º–µ—Ä—ã: \"–æ–¥–Ω—É –º–∏–Ω—É—Ç—É –ø–æ—Å–∏–∂—É –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\", \"–ø–æ—Å–ª—É—à–∞—é —Ö–æ—Ä–æ—à—É—é –º—É–∑—ã–∫—É\", \"–ø–æ—Ö–≤–∞–ª—é —Å–µ–±—è –≤ –∑–µ—Ä–∫–∞–ª–æ\").";
                        break;
                    case 'STEP_4':
                        updatePayload = { habit_reward: textToSave, onboarding_state: 'STEP_5' };
                        confirmationMessage = `ü•≥ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –ù–∞–≥—Ä–∞–¥–∞: *${textToSave}*.\n\n–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏—à—å –ø—Ä–∏–≤—ã—á–∫—É, —Ç–≤–æ–π –º–æ–∑–≥ **–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ** –ø–æ–ª—É—á–∏—Ç –¥–æ—Ñ–∞–º–∏–Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª. –≠—Ç–æ –∑–∞–∫—Ä–µ–ø–∏—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Å–≤—è–∑—å!`;
                        // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –®–∞–≥–∞ 5 (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¶–µ–ø–æ—á–∫–∏)
                        nextQuestion = "*–®–ê–ì 5 –∏–∑ 10: –¶–µ–ø–æ—á–∫–∞ –ü—Ä–æ–≥—Ä–µ—Å—Å–∞.*\n\n–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã, –Ω–æ –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –¢–≤–æ—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ü–µ–ª—å ‚Äî **–Ω–µ —Ä–∞–∑–æ—Ä–≤–∞—Ç—å —Ü–µ–ø–æ—á–∫—É**!\n\n–ù–∞–ø–∏—à–∏ **¬´–¶–µ–ø–æ—á–∫–∞¬ª**, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —Ç—ã –≥–æ—Ç–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å **‚úÖ –ì–æ—Ç–æ–≤–æ** –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.";
                        break;
                    case 'STEP_5':
                        // –ü–†–û–í–ï–†–ö–ê: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–¶–ï–ü–û–ß–ö–ê" (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω)
                        if (textToSave.toLowerCase() !== '—Ü–µ–ø–æ—á–∫–∞') {
                            await sendTelegramMessage(chatId, `–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ **¬´–¶–µ–ø–æ—á–∫–∞¬ª** (–∏–ª–∏ **¬´—Ü–µ–ø–æ—á–∫–∞¬ª**).`);
                            return response.status(200).send('Waiting for confirmation');
                        }

                        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç "–¶–ï–ü–û–ß–ö–ê", –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –®–∞–≥—É 6
                        // –ú—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç, —Ç–æ–ª—å–∫–æ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
                        updatePayload = { onboarding_state: 'STEP_6' };
                        
                        // –¢–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –®–∞–≥–∞ 5 (—Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)
                        confirmationMessage = `–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≥–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–∏—é. \n\n**–§–£–ù–ö–¶–ò–û–ù–ê–õ –¢–†–ï–ö–ï–†–ê:** –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ **‚úÖ –ì–æ—Ç–æ–≤–æ** (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã **\`/done\`**) –±–æ—Ç –±—É–¥–µ—Ç:\n1. –§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å **–≥–æ–ª–æ—Å** –∑–∞ —Ç–≤–æ—é –ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å.\n2. –û–±–Ω–æ–≤–ª—è—Ç—å **—Ü–µ–ø–æ—á–∫—É** (streak).\n\n–ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!`;
                        
                        // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –®–∞–≥–∞ 6
                        nextQuestion = "*–®–ê–ì 6 –∏–∑ 10: –ö–∞–∫ —Ç—ã –Ω–∞–∑–æ–≤–µ—à—å –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏?*\n\n–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –Ω—É–∂–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∞—è, –ª–µ–≥–∫–æ —É–∑–Ω–∞–≤–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞.\n\n–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.";
                        break;
                    case 'STEP_6':
                        updatePayload = { habit_identifier: textToSave, onboarding_state: 'STEP_7' };
                        confirmationMessage = `–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: *${textToSave}*.\n\n–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Ç—ã —É–≤–∏–¥–∏—à—å —ç—Ç–æ—Ç ID, —Ç—ã —Ç–æ—á–Ω–æ –±—É–¥–µ—à—å –∑–Ω–∞—Ç—å, —á—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å.`;
                        
                        // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –®–∞–≥–∞ 7
                        nextQuestion = "*–®–ê–ì 7 –∏–∑ 10: –ü—Ä–æ–≤–∞–ª—ã*\n\n–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–≤–∞–ª—ã. –ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, —á—Ç–æ –º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–º–µ—à–∞—Ç—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É?\n\n–ù–∞–ø–∏—à–∏ –æ–¥–Ω–æ —Å–∞–º–æ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–£—Å—Ç–∞–ª–æ—Å—Ç—å –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã\", \"–ó–∞–±—É–¥—É –æ –ø—Ä–∏–≤—ã—á–∫–µ\", \"–ù–µ —Ö–≤–∞—Ç–∏—Ç –≤—Ä–µ–º–µ–Ω–∏\").";
                        break;
                    case 'STEP_7':
                        updatePayload = { obstacle_plan_1: textToSave, onboarding_state: 'STEP_8' };
                        confirmationMessage = `–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: *${textToSave}*.\n\n–ú—ã –≥–æ—Ç–æ–≤—ã –∫ –±–æ—Ä—å–±–µ.`;
                        
                        // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –®–∞–≥–∞ 8
                        nextQuestion = `*–®–ê–ì 8 –∏–∑ 10: –ü–ª–∞–Ω –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è?*\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç *${textToSave}*, —Ç–æ —á—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å?\n\n–ù–∞–ø–∏—à–∏ –ø–ª–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ï—Å–ª–∏ —É—Å—Ç–∞–Ω—É –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã, —Å–¥–µ–ª–∞—é –æ—Ç–∂–∏–º–∞–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–∏–¥—É –¥–æ–º–æ–π", "–ï—Å–ª–∏ –∑–∞–±—É–¥—É, –ø–æ—Å—Ç–∞–≤–ª—é –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ 17:00").`;
                        break;
                    case 'STEP_8':
                        updatePayload = { obstacle_plan_2: textToSave, onboarding_state: 'STEP_9' };
                        // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –®–∞–≥–∞ 8
                        confirmationMessage = `–ü–ª–∞–Ω –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è: *${textToSave}*.\n\n–¢—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª —Å–µ–±—è –∫ —É—Å–ø–µ—Ö—É. –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª–∞–≥–∞—Ç—å—Å—è **—Ç–æ–ª—å–∫–æ** –Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—é.`;
                        
                        // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –®–∞–≥–∞ 9
                        nextQuestion = "*–®–ê–ì 9 –∏–∑ 10: –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –ø—Ä–∏–≤—ã—á–∫—É *–¥–≤–∞–∂–¥—ã –ø–æ–¥—Ä—è–¥*. –≠—Ç–æ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ.\n\n–ù–∞–ø–∏—à–∏, –∫–∞–∫ —Ç—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–µ—Ä–Ω–µ—à—å—Å—è –∫ –ø—Ä–∏–≤—ã—á–∫–µ –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ù–∞—á–Ω—É —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã –¥–Ω—è\", \"–°–¥–µ–ª–∞—é –µ–µ —Å—Ä–∞–∑—É –∂–µ, –∫–∞–∫ –≤—Å–ø–æ–º–Ω—é, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏\").";
                        break;
                    case 'STEP_9':
                        updatePayload = { failure_plan: textToSave, onboarding_state: 'STEP_10' };
                        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –®–∞–≥–∞ 9
                        confirmationMessage = `–ü—Ä–∞–≤–∏–ª–æ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ: *${textToSave}*.\n\n–≠—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç —Ç–µ–±—è –æ—Ç —Å—Ä—ã–≤–∞. –û–¥–∏–Ω –ø—Ä–æ–ø—É—Å–∫ - —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å. –î–≤–∞ - –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π, –ø–ª–æ—Ö–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.`;
                        
                        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –®–∞–≥–∞ 10 (–°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω –Ω–∞ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∏ —Ñ–æ—Ä–º–∞—Ç–µ)
                        nextQuestion = "*–®–ê–ì 10 –∏–∑ 10: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤*\n\n–ß—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã.\n\n–ù–∞–ø–∏—à–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–∏–≤—ã—á–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: **18:30** –∏–ª–∏ **08:00**).";
                        break;
                    case 'STEP_10':
                        // –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥!
                        updatePayload = { repetition_schedule: textToSave, onboarding_state: 'COMPLETED' };
                        
                        const { error: updateErrorStep10 } = await supabase
                            .from('users')
                            .update(updatePayload)
                            .eq('telegram_id', chatId);

                        if (updateErrorStep10) {
                            console.error(`Update Error (STEP_10):`, updateErrorStep10);
                            await sendTelegramMessage(chatId, `–û—à–∏–±–∫–∞ –ë–î (UPDATE). –ö–æ–¥: ${updateErrorStep10.code}.`, 'HTML');
                            return response.status(500).send('Database Update Error');
                        }
                        
                        // –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏
                        const finalData = { ...userData, ...updatePayload };

                        // 3. –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        confirmationMessage = `üéâ *–û–ù–ë–û–†–î–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!* üéâ\n\n**–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!** –¢—ã —Å–æ–∑–¥–∞–ª *–ö–≤–∞–Ω—Ç–æ–≤—É—é –ü—Ä–∏–≤—ã—á–∫—É*. –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ *${textToSave}*.\n\n---
*–¢–≤–æ—è –ü–æ–ª–Ω–∞—è –§–æ—Ä–º—É–ª–∞:*\n
*–ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å:* ${finalData.desired_identity || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
*–ú–∏–∫—Ä–æ-–ü—Ä–∏–≤—ã—á–∫–∞:* ${finalData.habit_micro_step || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
*–¢—Ä–∏–≥–≥–µ—Ä (–°–≤—è–∑–∫–∞):* ${finalData.habit_link_action || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
*–ù–∞–≥—Ä–∞–¥–∞ (–î–æ—Ñ–∞–º–∏–Ω):* ${finalData.habit_reward || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
*–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* ${finalData.habit_identifier || '–ù–µ —É–∫–∞–∑–∞–Ω'}
*–ü–ª–∞–Ω –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ:* ${finalData.failure_plan || '–ù–µ —É–∫–∞–∑–∞–Ω'}
---

*–ù–∞—á–Ω–∏ —Å–µ–π—á–∞—Å:* –í—ã–ø–æ–ª–Ω–∏ *${finalData.habit_micro_step || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}* **—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ** *${finalData.habit_link_action || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}*. \n\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏ **‚úÖ –ì–æ—Ç–æ–≤–æ**!`;
                        nextQuestion = null;
                        
                        await sendTelegramMessage(chatId, confirmationMessage, COMPLETED_KEYBOARD);
                        return response.status(200).send('Processed');

                    default:
                        confirmationMessage = `–û—à–∏–±–∫–∞! –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: *${currentStep}*.\n\n–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.`;
                        nextQuestion = null;
                }
            }
            
            // –ï—Å–ª–∏ –º—ã –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'COMPLETED' –∏ –Ω–µ –≤ 'STEP_10', –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ë–î
            if (currentStep !== 'STEP_10' && currentStep !== 'COMPLETED') {
                
                const { error: updateError } = await supabase
                    .from('users')
                    .update(updatePayload)
                    .eq('telegram_id', chatId);

                if (updateError) {
                    console.error(`Update Error (${currentStep}):`, updateError);
                    await sendTelegramMessage(chatId, `–û—à–∏–±–∫–∞ –ë–î (UPDATE). –ö–æ–¥: ${updateError.code}.`, 'HTML');
                    return response.status(500).send('Database Update Error');
                }
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TYPING –∏ DELAY)
            if (currentStep !== 'STEP_10') {
                await sendChatAction(chatId, 'typing');
                await delay(1000); // 1.0s –ø–∞—É–∑–∞
                await sendTelegramMessage(chatId, confirmationMessage);
                if (nextQuestion) {
                    await sendChatAction(chatId, 'typing');
                    await delay(1000); // 1.0s –ø–∞—É–∑–∞
                    await sendTelegramMessage(chatId, nextQuestion);
                }
            }
        }
        
        response.status(200).send('Processed');

    } catch (e) {
        console.error('Webhook processing failed (uncaught):', e);
        response.status(500).send('Server Error');
    }
};
