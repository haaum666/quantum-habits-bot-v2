// api/webhook.js

import { createClient } from '@supabase/supabase-js';

// 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø SUPABASE –ò TELEGRAM
const SUPABASE_URL = process.env.BOT_SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY; 
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase —Å Service Key
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY); 

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ Telegram API
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

// 2. –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–í–ï–¢–ê –í TELEGRAM
async function sendTelegramMessage(chatId, text, parse_mode = 'Markdown') {
    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            chat_id: chatId,
            text: text,
            parse_mode: parse_mode, // –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }),
    });
    if (!response.ok) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å Body has already been read
        console.error(`Telegram API Error: ${await response.text()}`);
    }
    return response.json();
}

// 3. –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö (Webhook)
export default async (request, response) => {
    
    if (request.method !== 'POST') {
        return response.status(405).send('Only POST requests allowed');
    }

    let body;
    try {
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        const rawBody = await new Promise((resolve) => {
            let data = '';
            request.on('data', chunk => data += chunk);
            request.on('end', () => resolve(data));
        });
        body = JSON.parse(rawBody);

    } catch (e) {
        console.error('Body parsing failed:', e);
        return response.status(400).send('Invalid request body');
    }

    const message = body.message;

    if (!message || !message.text || !message.chat) {
        return response.status(200).send('No message to process');
    }

    const chatId = message.chat.id;
    const incomingText = message.text.trim();

    try {
        // A. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        const { data: userData, error: userError } = await supabase
            .from('users') 
            .select('telegram_id, onboarding_state')
            .eq('telegram_id', chatId)
            .single();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ë–î, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ 'No rows returned' (PGRST116)
        if (userError && userError.code !== 'PGRST116') {
            console.error('Supabase Error (SELECT):', userError);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç—É—é –æ—à–∏–±–∫—É –±–µ–∑ Markdown, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å
            await sendTelegramMessage(chatId, `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î. –ö–æ–¥: ${userError.code}.`, 'HTML');
            return response.status(500).send('Database Error');
        }
        
        // ===============================================
        // –õ–û–ì–ò–ö–ê 1: –ö–û–ú–ê–ù–î–ê /start (–ò–ª–∏ –ù–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        // ===============================================
        const isStartCommand = incomingText.startsWith('/start');
        
        if (isStartCommand || !userData) {
            
            // 1. –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            if (!userData) {
                const { error: insertError } = await supabase
                    .from('users')
                    .insert([{ telegram_id: chatId, onboarding_state: 'STEP_1' }]);
                
                if (insertError) {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥—É–±–ª–∏–∫–∞—Ç–∞ –∫–ª—é—á–∞ (23505) –∫–∞–∫ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–±—ã—Ç–∏–µ
                    if (insertError.code === '23505') {
                        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É.
                        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É.');
                    } else {
                        console.error('Insert Error:', insertError);
                         // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç—É—é –æ—à–∏–±–∫—É –±–µ–∑ Markdown
                        await sendTelegramMessage(chatId, `–û—à–∏–±–∫–∞ –ë–î (INSERT). –ö–æ–¥: ${insertError.code}.`, 'HTML');
                        return response.status(500).send('Database Insert Error');
                    }
                }
            }
            
            // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            const welcomeMessage = `üëã *–ü—Ä–∏–≤–µ—Ç!* –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–µ—Ç–æ–¥—É \"–ê—Ç–æ–º–Ω—ã—Ö –ü—Ä–∏–≤—ã—á–µ–∫\".\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–µ–¥—É—Ç –∫ 1% —É–ª—É—á—à–µ–Ω–∏—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. \n\n–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –≥–ª–∞–≤–Ω–æ–≥–æ.`;
            await sendTelegramMessage(chatId, welcomeMessage);
            
            await sendTelegramMessage(chatId, "*–®–ê–ì 1 –∏–∑ 10: –ö–ï–ú —Ç—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å?*\n\n–í—Å—è —Å–∏–ª–∞ –≤ –ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏. –ù–∞–ø–∏—à–∏, –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–∏–º –ø—Ä–∏–≤—ã—á–∫–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ó–¥–æ—Ä–æ–≤—ã–º –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º\", \"–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º\", \"–û–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º –∏ —Ä–∞–∑–≤–∏—Ç—ã–º\").");

        // ===============================================
        // –õ–û–ì–ò–ö–ê 2: –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê (–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å)
        // ===============================================
        } else {
            // ... (–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞)
            if (userData.onboarding_state === 'STEP_1') {
                const identityText = incomingText.substring(0, 100);

                const { error: updateError } = await supabase
                    .from('users')
                    .update({
                        desired_identity: identityText,
                        onboarding_state: 'STEP_2'
                    })
                    .eq('telegram_id', chatId);

                if (updateError) {
                    console.error('Update Identity Error:', updateError);
                     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç—É—é –æ—à–∏–±–∫—É –±–µ–∑ Markdown
                    await sendTelegramMessage(chatId, `–û—à–∏–±–∫–∞ –ë–î (UPDATE). –ö–æ–¥: ${updateError.code}.`, 'HTML');
                    return response.status(500).send('Database Update Error');
                }

                const confirmationMessage = `–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å: *${identityText}*.\n\n–ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É, –≤—ã –≥–æ–ª–æ—Å—É–µ—Ç–µ –∑–∞ —ç—Ç—É –ª–∏—á–Ω–æ—Å—Ç—å.`;
                await sendTelegramMessage(chatId, confirmationMessage);

                await sendTelegramMessage(chatId, "*–®–ê–ì 2 –∏–∑ 10: –ß—Ç–æ —Ç—ã –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?*\n\n–í—Å–ø–æ–º–Ω–∏—Ç–µ –ü—Ä–∞–≤–∏–ª–æ –î–≤—É—Ö –ú–∏–Ω—É—Ç: –õ—é–±–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–Ω–∏–º–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç.\n\n–ù–∞–ø–∏—à–∏, –∫–∞–∫—É—é –º–∏–∫—Ä–æ-–ø—Ä–∏–≤—ã—á–∫—É —Ç—ã –≥–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–û—Ç–∂–∞—Ç—å—Å—è 1 —Ä–∞–∑\", \"–ü—Ä–æ—á–∏—Ç–∞—Ç—å 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É\", \"–í—ã–ø–∏—Ç—å 1 —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã\").");
            
            } else {
                await sendTelegramMessage(chatId, `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: *${userData.onboarding_state}*.\n\n_–ü–æ–∫–∞ —á—Ç–æ —è –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã –Ω–∞ STEP_1._`);
            }
        }
        
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç 200 OK –¥–ª—è Telegram
        response.status(200).send('Processed');

    } catch (e) {
        console.error('Webhook processing failed (uncaught):', e);
        // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–ì, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏ "Body already read"
        response.status(500).send('Server Error');
    }
};
