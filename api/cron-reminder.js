import { createClient } from '@supabase/supabase-js';

// 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
const SUPABASE_URL = process.env.BOT_SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

// 2. –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–õ–Ø –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø
const REMINDER_KEYBOARD = {
    keyboard: [
        [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }],
        [{ text: 'üìä –ú–æ–π –ü—Ä–æ–≥—Ä–µ—Å—Å' }, { text: 'üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥' }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
};

// 3. –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–í–ï–¢–ê –í TELEGRAM
async function sendTelegramMessage(chatId, text, keyboard = null, parse_mode = 'Markdown') {
    const payload = {
        chat_id: chatId,
        text: text,
        parse_mode: parse_mode,
    };

    if (keyboard) {
        payload.reply_markup = keyboard;
    }

    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
    });
    if (!response.ok) {
        console.error(`Telegram API Error: ${await response.text()}`);
    }
    return response.json();
}

// 4. –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø CRON JOB
export default async (request, response) => {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω–∏–π Cron)
    // if (request.headers.authorization !== `Bearer ${process.env.CRON_SECRET}`) {
    //     return response.status(401).json({ success: false, message: 'Unauthorized' });
    // }
    
    // --- 4.1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ë–î) ---
    // –ú—ã –±–µ—Ä–µ–º –≤—Ä–µ–º—è –≤ UTC, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏. 
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≤—Ä–µ–º—è –≤ —Å–≤–æ–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ.
    // –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å TZ-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. 
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º "HH:MM".
    
    const now = new Date();
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, "09:25")
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–º–µ—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å –∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3) 
    // (–ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–≤–æ–¥—è—Ç –≤—Ä–µ–º—è –ø–æ –ú–°–ö)
    const moscowOffset = 3 * 60 * 60 * 1000; // 3 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const moscowTime = new Date(now.getTime() + moscowOffset);
    
    // –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
    const currentHour = String(moscowTime.getHours()).padStart(2, '0');
    const currentMinute = String(moscowTime.getMinutes()).padStart(2, '0');
    const currentTime = `${currentHour}:${currentMinute}`; 
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤
    const today = moscowTime.toISOString().split('T')[0];
    
    console.log(`[CRON] Running at (MSK assumed): ${currentTime}. Check date: ${today}`);


    // --- 4.2. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—å–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—à–ª–æ (–∏–ª–∏ –±—ã–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ) ---
    const { data: users, error: userError } = await supabase
        .from('users')
        .select('telegram_id, habit_micro_step, desired_identity, repetition_schedule')
        .eq('onboarding_state', 'COMPLETED')
        // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —á–∞—Å—É –∏ –º–∏–Ω—É—Ç–∞–º. –ú—ã –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, 
        // —É –∫–æ–≥–æ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        .eq('repetition_schedule', currentTime) 
        .not('repetition_schedule', 'is', null);

    if (userError) {
        console.error('Supabase User Fetch Error:', userError);
        return response.status(500).json({ success: false, message: 'Database fetch error' });
    }

    let usersNotified = 0;
    
    // --- 4.3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
    for (const user of users) {
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞: –í—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—ã—á–∫—É —Å–µ–≥–æ–¥–Ω—è?
        const { count: logCount, error: logError } = await supabase
            .from('habit_logs')
            .select('*', { count: 'exact', head: true })
            .eq('telegram_id', user.telegram_id)
            // –ò—â–µ–º –ª–æ–≥–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –°–ï–ì–û–î–ù–Ø (—Å–µ–≥–æ–¥–Ω—è = –¥–∞—Ç–∞ –∏–∑ today)
            .gte('completed_at', today); 

        if (logError) {
            console.error(`Log Check Error for user ${user.telegram_id}:`, logError);
            continue; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
        }

        // –ï—Å–ª–∏ –ª–æ–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if (logCount === 0) {
            
            const reminderText = `üîî *–ö–í–ê–ù–¢–£–ú–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï!* üîî\n\n–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–≤–æ—é –º–∏–∫—Ä–æ-–ø—Ä–∏–≤—ã—á–∫—É: *${user.habit_micro_step}*.\n\n_–ü–æ–º–Ω–∏: –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —Ç—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ, —Ç—ã –≥–æ–ª–æ—Å—É–µ—à—å –∑–∞ —Å–≤–æ—é –ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å: —Å—Ç–∞—Ç—å ${user.desired_identity}_. \n\n*–ù–∞–∂–º–∏ "‚úÖ –ì–æ—Ç–æ–≤–æ", –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–∏—à—å.*`;
            
            await sendTelegramMessage(user.telegram_id, reminderText, REMINDER_KEYBOARD);
            usersNotified++;
        }
    }

    return response.status(200).json({ 
        success: true, 
        message: 'Reminder check completed', 
        users_found: users.length,
        users_notified: usersNotified,
        time_checked: currentTime
    });
};
